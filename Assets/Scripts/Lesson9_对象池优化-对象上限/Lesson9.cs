using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Lesson9 : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        #region 知识点一 对象上限优化指的是什么？
        //目前我们制作的缓存池模块
        //理论上来说，当动态创建的对象长时间不放回抽屉
        //每次从缓存池中动态获取对象时，会不停的新建对象
        //那么也就是对象的数量是没有上限的
        //场景上的某种对象可以存在n个

        //而对象上限优化指的就是
        //我们希望控制对象数量有上限
        //对于不重要的资源我们没必要让其无限加量
        //而是将“使用最久”的资源直接抢来用

        //主要目的：
        //更加彻底的复用资源
        //对对象的数量上限加以限制
        //可以优化内存空间，甚至优化性能（减少数量上限，可以减小渲染压力）
        #endregion

        #region 知识点二 制作思路和具体实现
        //制作思路：
        //1.在抽屉里声明一个容器用来记录正在使用的资源
        //2.每次获取对象时，传入一个抽屉最大容量值（可以给一个默认值）
        //3.从缓存池中获取对象时就需要创建抽屉，用于记录当前使用着的对象
        //4.每次取对象时应该分情况考虑
        //  情况1：没有抽屉时
        //  情况2：有抽屉，并且抽屉里有没用的对象或者使用中对象超过上限时
        //  情况3：有抽屉，但是抽屉里没有对象，使用中对象也没有超过上限时
        //4.每次放回对象时
        //  由于记录了正在使用的资源，因此每次放入抽屉时还需要从记录容器中移除对象

        //具体实现:
        //根据制作思路进行实现即可
        #endregion

        #region 思考题
        //现在我们确定最大容量是通过在获取时传入参数
        //若传入参数出错可能会导致“超上限”
        //能否优化下，以其它思路去制作，让我们可以更加方便的处理上限逻辑
        #endregion
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
